package com.example.demo.controller;

import com.example.demo.model.Book;
import com.example.demo.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/books")
@CrossOrigin(origins = "http://localhost:5173")
public class BookController {

    @Autowired
    private BookRepository bookRepository;

    // ✅ Get all books
    @GetMapping
    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    // ✅ Upload new book
    @PostMapping("/upload")
    public ResponseEntity<?> uploadBook(
            @RequestParam String title,
            @RequestParam String author,
            @RequestParam String year,
            @RequestParam MultipartFile file
    ) {
        try {
            Book book = new Book();
            book.setTitle(title);
            book.setAuthor(author);
            book.setYear(year);
            book.setFile(file.getBytes());
            book.setFileName(file.getOriginalFilename());

            bookRepository.save(book);
            return ResponseEntity.ok(book);

        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("{\"error\":\"Failed to upload file\"}");
        }
    }

    // ✅ Download book file
    @GetMapping("/download/{id}")
    public ResponseEntity<byte[]> downloadBook(@PathVariable Long id) {
        Optional<Book> bookOpt = bookRepository.findById(id);
        if (bookOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }

        Book book = bookOpt.get();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setContentDisposition(ContentDisposition.builder("attachment")
                .filename(book.getFileName())
                .build());

        return new ResponseEntity<>(book.getFile(), headers, HttpStatus.OK);
    }

    // ✅ Update book (only author/admin)
    @PutMapping("/{id}")
    public ResponseEntity<?> updateBook(
            @PathVariable Long id,
            @RequestParam String title,
            @RequestParam String author,
            @RequestParam String year,
            @RequestParam(required = false) MultipartFile file
    ) {
        Optional<Book> bookOpt = bookRepository.findById(id);
        if (bookOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("{\"error\":\"Book not found\"}");
        }

        Book book = bookOpt.get();

        // Only the original author or admin can edit
        if (!book.getAuthor().equals(author)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body("{\"error\":\"You are not authorized to edit this book\"}");
        }

        book.setTitle(title);
        book.setYear(year);
        if (file != null) {
            try {
                book.setFile(file.getBytes());
                book.setFileName(file.getOriginalFilename());
            } catch (IOException e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("{\"error\":\"Failed to update file\"}");
            }
        }

        bookRepository.save(book);
        return ResponseEntity.ok(book);
    }

    // ✅ Delete book (only author/admin)
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteBook(@PathVariable Long id, @RequestParam String author) {
        Optional<Book> bookOpt = bookRepository.findById(id);
        if (bookOpt.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body("{\"error\":\"Book not found\"}");
        }

        Book book = bookOpt.get();

        // Only author/admin can delete
        if (!book.getAuthor().equals(author)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body("{\"error\":\"You are not authorized to delete this book\"}");
        }

        bookRepository.delete(book);
        return ResponseEntity.ok("{\"message\":\"Book deleted successfully\"}");
    }
}
