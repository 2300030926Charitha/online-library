package com.example.demo.controller;

import com.example.demo.model.Book;
import com.example.demo.model.User;
import com.example.demo.repository.BookRepository;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.nio.file.*;
import java.util.*;

@RestController
@RequestMapping("/api/books")
@CrossOrigin(origins = "http://localhost:5173")
public class BookController {

    @Autowired
    private BookRepository bookRepository;

    @Autowired
    private UserRepository userRepository;

    private static final String UPLOAD_DIR = "uploads/";

    // ✅ Get all books
    @GetMapping
    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    // ✅ Upload book
    @PostMapping("/upload")
    public ResponseEntity<?> uploadBook(
            @RequestParam String title,
            @RequestParam int year,
            @RequestParam MultipartFile file
    ) throws IOException {

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null || auth.getName().equals("anonymousUser"))
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "User not logged in"));

        User user = userRepository.findByUsername(auth.getName()).orElse(null);
        if (user == null) return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "User not found"));

        if (!List.of("AUTHOR", "ADMIN").contains(user.getRole().toUpperCase()))
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("error", "Only authors or admins can upload books"));

        File uploadDir = new File(UPLOAD_DIR);
        if (!uploadDir.exists()) uploadDir.mkdirs();

        String filename = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path path = Paths.get(UPLOAD_DIR + filename);
        Files.write(path, file.getBytes());

        Book book = new Book();
        book.setTitle(title);
        book.setAuthor(user.getUsername());
        book.setYear(year);
        book.setFileName(filename);
        book.setFilePath(path.toString());
        bookRepository.save(book);

        return ResponseEntity.ok(Map.of("message", "Book uploaded successfully", "bookId", book.getId()));
    }

    // ✅ Download book
    @GetMapping("/download/{id}")
    public ResponseEntity<?> downloadBook(@PathVariable Long id) throws IOException {
        Optional<Book> bookOpt = bookRepository.findById(id);
        if (bookOpt.isEmpty()) return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Book not found"));

        Book book = bookOpt.get();
        File file = new File(book.getFilePath());
        if (!file.exists()) return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "File not found"));

        byte[] content = Files.readAllBytes(file.toPath());
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setContentDisposition(ContentDisposition.builder("attachment").filename(book.getFileName()).build());

        return new ResponseEntity<>(content, headers, HttpStatus.OK);
    }

    // ✅ Update book
    @PutMapping("/{id}")
    public ResponseEntity<?> updateBook(
            @PathVariable Long id,
            @RequestParam String title,
            @RequestParam int year,
            @RequestParam(required = false) MultipartFile file
    ) throws IOException {
        Optional<Book> bookOpt = bookRepository.findById(id);
        if (bookOpt.isEmpty()) return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Book not found"));

        Book book = bookOpt.get();
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        User user = userRepository.findByUsername(auth.getName()).orElse(null);
        if (user == null) return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "User not found"));

        if (!user.getRole().equalsIgnoreCase("ADMIN") && !book.getAuthor().equals(user.getUsername()))
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("error", "Not authorized to edit"));

        book.setTitle(title);
        book.setYear(year);

        if (file != null) {
            String filename = System.currentTimeMillis() + "_" + file.getOriginalFilename();
            Path path = Paths.get(UPLOAD_DIR + filename);
            Files.write(path, file.getBytes());
            book.setFileName(filename);
            book.setFilePath(path.toString());
        }

        bookRepository.save(book);
        return ResponseEntity.ok(Map.of("message", "Book updated successfully"));
    }

    // ✅ Delete book
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteBook(@PathVariable Long id) {
        Optional<Book> bookOpt = bookRepository.findById(id);
        if (bookOpt.isEmpty()) return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Book not found"));

        Book book = bookOpt.get();
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        User user = userRepository.findByUsername(auth.getName()).orElse(null);
        if (user == null) return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("error", "User not found"));

        if (!user.getRole().equalsIgnoreCase("ADMIN") && !book.getAuthor().equals(user.getUsername()))
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("error", "Not authorized to delete"));

        File file = new File(book.getFilePath());
        if (file.exists()) file.delete();

        bookRepository.delete(book);
        return ResponseEntity.ok(Map.of("message", "Book deleted successfully"));
    }
}
