package jWT;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.security.Keys;

import java.security.Key;
import java.util.Date;

public class JWTUtility {

    private static final String SECRET_KEY = "secret123"; // You might want to use a more secure method for storing this key

    // Create a Key instance from the secret key
    private static final Key key = Keys.hmacShaKeyFor(SECRET_KEY.getBytes());

    // Method to generate a JWT token
    public static String generateToken(String email) {
        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60)) // 1 hour
                .signWith(key, SignatureAlgorithm.HS256)
                .compact();
    }

    // Method to validate and parse the JWT token
    public static String validateToken(String token) {
        JwtParser parser = Jwts.parserBuilder() // Use parserBuilder to build the parser
                .setSigningKey(key)  // Set the signing key
                .build();

        Claims claims = parser.parseClaimsJws(token).getBody(); // Parse the token
        return claims.getSubject(); // Get the subject (email in this case)
    }
}