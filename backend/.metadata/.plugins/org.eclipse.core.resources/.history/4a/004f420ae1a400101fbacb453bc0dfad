package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // disable CSRF for testing
            .authorizeHttpRequests(auth -> auth
                // Public endpoints
                .requestMatchers("/", "/auth/**").permitAll()
                .requestMatchers("/api/books/download/**").permitAll() // anyone can download

                // ROLE-based API endpoints
                .requestMatchers("/api/books/upload/**").hasRole("AUTHOR")
                .requestMatchers("/api/books/**").hasAnyRole("AUTHOR", "ADMIN") // edit/delete

                .requestMatchers("/api/authors/**").hasRole("ADMIN")
                .requestMatchers("/api/subjects/**").hasRole("ADMIN")

                // Any other request
                .anyRequest().authenticated()
            )
            .httpBasic(); // For testing with Postman, you can later switch to formLogin()

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
