package com.example.demo.controller;

import com.example.demo.model.Book;
import com.example.demo.repository.BookRepository;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/books")
@CrossOrigin(origins = "http://localhost:5173")
public class BookController {

    private final BookRepository repo;

    // Make upload directory configurable & safer
    private final Path UPLOAD_DIR = Paths.get("uploads");

    public BookController(BookRepository repo) {
        this.repo = repo;
    }

    // ‚úÖ Fetch all books
    @GetMapping
    public List<Book> getAllBooks() {
        return repo.findAll();
    }

    // ‚úÖ Add metadata only
    @PostMapping
    public ResponseEntity<?> addBook(@RequestBody Book book) {
        Book savedBook = repo.save(book);
        return ResponseEntity.ok(Map.of(
                "message", "‚úÖ Book added successfully!",
                "book", savedBook
        ));
    }

    // ‚úÖ Upload a file with metadata
    @PostMapping("/upload")
    public ResponseEntity<?> uploadBook(
            @RequestParam("title") String title,
            @RequestParam("author") String author,
            @RequestParam("year") int year,
            @RequestParam("file") MultipartFile file
    ) throws IOException {

        if (file.isEmpty()) {
            return ResponseEntity.badRequest().body(Map.of("error", "No file uploaded"));
        }

        // Ensure upload directory exists
        if (!UPLOAD_DIR.toFile().exists()) UPLOAD_DIR.toFile().mkdirs();

        String filename = System.currentTimeMillis() + "_" + file.getOriginalFilename();
        Path filePath = UPLOAD_DIR.resolve(filename);
        file.transferTo(filePath.toFile());

        Book book = new Book();
        book.setTitle(title);
        book.setAuthor(author);
        book.setYear(year);
        book.setFilePath(filePath.toString());

        Book savedBook = repo.save(book);

        return ResponseEntity.ok(Map.of(
                "message", "üìò Book uploaded successfully!",
                "book", savedBook
        ));
    }

    // ‚úÖ Download file by ID
    @GetMapping("/download/{id}")
    public ResponseEntity<Resource> downloadBook(@PathVariable Long id) throws MalformedURLException {
        Book book = repo.findById(id)
                .orElseThrow(() -> new RuntimeException("Book not found with ID " + id));

        if (book.getFilePath() == null || book.getFilePath().isBlank()) {
            return ResponseEntity.badRequest().build();
        }

        Path path = Paths.get(book.getFilePath());
        if (!path.toFile().exists()) return ResponseEntity.notFound().build();

        Resource resource = new UrlResource(path.toUri());
        return ResponseEntity.ok()
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + path.getFileName() + "\"")
                .body(resource);
    }

    // ‚úÖ Update book
    @PutMapping("/{id}")
    public ResponseEntity<?> updateBook(
            @PathVariable Long id,
            @RequestParam("author") String author,
            @RequestParam(value = "title", required = false) String title,
            @RequestParam(value = "year", required = false) Integer year,
            @RequestParam(value = "file", required = false) MultipartFile file
    ) throws IOException {

        Book existingBook = repo.findById(id)
                .orElseThrow(() -> new RuntimeException("Book not found with ID: " + id));

        if (!existingBook.getAuthor().equals(author)) {
            return ResponseEntity.status(403).body(Map.of(
                    "error", "‚ùå Only the original author can edit this book."
            ));
        }

        if (title != null && !title.isBlank()) existingBook.setTitle(title);
        if (year != null) existingBook.setYear(year);

        if (file != null && !file.isEmpty()) {
            if (!UPLOAD_DIR.toFile().exists()) UPLOAD_DIR.toFile().mkdirs();

            // Delete old file safely
            if (existingBook.getFilePath() != null) {
                File oldFile = new File(existingBook.getFilePath());
                if (oldFile.exists()) oldFile.delete();
            }

            String filename = System.currentTimeMillis() + "_" + file.getOriginalFilename();
            Path filePath = UPLOAD_DIR.resolve(filename);
            file.transferTo(filePath.toFile());
            existingBook.setFilePath(filePath.toString());
        }

        Book updatedBook = repo.save(existingBook);

        return ResponseEntity.ok(Map.of(
                "message", "‚úèÔ∏è Book updated successfully!",
                "book", updatedBook
        ));
    }

    // ‚úÖ Delete book
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteBook(@PathVariable Long id) {
        Book book = repo.findById(id).orElse(null);
        if (book == null) return ResponseEntity.badRequest().body(Map.of("error", "Book not found"));

        if (book.getFilePath() != null) {
            File file = new File(book.getFilePath());
            if (file.exists()) file.delete();
        }

        repo.deleteById(id);
        return ResponseEntity.ok(Map.of("message", "üóëÔ∏è Book deleted successfully!"));
    }
}
